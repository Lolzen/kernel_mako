--- drivers/usb/core/devio.c
+++ drivers/usb/core/devio.c
@@ -333,14 +333,17 @@
 static struct async *async_getpending(struct dev_state *ps,
 					     void __user *userurb)
 {
+	unsigned long flags;
 	struct async *as;
 
+	spin_lock_irqsave(&ps->lock, flags);
 	list_for_each_entry(as, &ps->async_pending, asynclist)
 		if (as->userurb == userurb) {
 			list_del_init(&as->asynclist);
+			spin_unlock_irqrestore(&ps->lock, flags);
 			return as;
 		}
-
+	spin_unlock_irqrestore(&ps->lock, flags);
 	return NULL;
 }
 
@@ -395,7 +398,6 @@
 __releases(ps->lock)
 __acquires(ps->lock)
 {
-	struct urb *urb;
 	struct async *as;
 
 	/* Mark all the pending URBs that match bulk_addr, up to but not
@@ -418,11 +420,8 @@
 	list_for_each_entry(as, &ps->async_pending, asynclist) {
 		if (as->bulk_status == AS_UNLINK) {
 			as->bulk_status = 0;		/* Only once */
-			urb = as->urb;
-			usb_get_urb(urb);
 			spin_unlock(&ps->lock);		/* Allow completions */
-			usb_unlink_urb(urb);
-			usb_put_urb(urb);
+			usb_unlink_urb(as->urb);
 			spin_lock(&ps->lock);
 			goto rescan;
 		}
@@ -473,7 +472,6 @@
 
 static void destroy_async(struct dev_state *ps, struct list_head *list)
 {
-	struct urb *urb;
 	struct async *as;
 	unsigned long flags;
 
@@ -481,13 +479,10 @@
 	while (!list_empty(list)) {
 		as = list_entry(list->next, struct async, asynclist);
 		list_del_init(&as->asynclist);
-		urb = as->urb;
-		usb_get_urb(urb);
 
 		/* drop the spinlock so the completion handler can run */
 		spin_unlock_irqrestore(&ps->lock, flags);
-		usb_kill_urb(urb);
-		usb_put_urb(urb);
+		usb_kill_urb(as->urb);
 		spin_lock_irqsave(&ps->lock, flags);
 	}
 	spin_unlock_irqrestore(&ps->lock, flags);
@@ -1415,24 +1410,12 @@
 
 static int proc_unlinkurb(struct dev_state *ps, void __user *arg)
 {
-	struct urb *urb;
 	struct async *as;
-	unsigned long flags;
 
-	spin_lock_irqsave(&ps->lock, flags);
 	as = async_getpending(ps, arg);
-	if (!as) {
-		spin_unlock_irqrestore(&ps->lock, flags);
+	if (!as)
 		return -EINVAL;
-	}
-
-	urb = as->urb;
-	usb_get_urb(urb);
-	spin_unlock_irqrestore(&ps->lock, flags);
-
-	usb_kill_urb(urb);
-	usb_put_urb(urb);
-
+	usb_kill_urb(as->urb);
 	return 0;
 }
 
