--- net/l2tp/l2tp_ip.c
+++ net/l2tp/l2tp_ip.c
@@ -251,16 +251,9 @@
 {
 	struct inet_sock *inet = inet_sk(sk);
 	struct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;
-	int ret;
+	int ret = -EINVAL;
 	int chk_addr_ret;
 
-	if (!sock_flag(sk, SOCK_ZAPPED))
-		return -EINVAL;
-	if (addr_len < sizeof(struct sockaddr_l2tpip))
-		return -EINVAL;
-	if (addr->l2tp_family != AF_INET)
-		return -EINVAL;
-
 	ret = -EADDRINUSE;
 	read_lock_bh(&l2tp_ip_lock);
 	if (__l2tp_ip_bind_lookup(&init_net, addr->l2tp_addr.s_addr, sk->sk_bound_dev_if, addr->l2tp_conn_id))
@@ -291,8 +284,6 @@
 	sk_del_node_init(sk);
 	write_unlock_bh(&l2tp_ip_lock);
 	ret = 0;
-	sock_reset_flag(sk, SOCK_ZAPPED);
-
 out:
 	release_sock(sk);
 
@@ -313,14 +304,13 @@
 	__be32 saddr;
 	int oif, rc;
 
-	if (sock_flag(sk, SOCK_ZAPPED)) /* Must bind first - autobinding does not work */
-		return -EINVAL;
-
+	rc = -EINVAL;
 	if (addr_len < sizeof(*lsa))
-		return -EINVAL;
+		goto out;
 
+	rc = -EAFNOSUPPORT;
 	if (lsa->l2tp_family != AF_INET)
-		return -EAFNOSUPPORT;
+		goto out;
 
 	lock_sock(sk);
 
@@ -374,14 +364,6 @@
 	return rc;
 }
 
-static int l2tp_ip_disconnect(struct sock *sk, int flags)
-{
-	if (sock_flag(sk, SOCK_ZAPPED))
-		return 0;
-
-	return udp_disconnect(sk, flags);
-}
-
 static int l2tp_ip_getname(struct socket *sock, struct sockaddr *uaddr,
 			   int *uaddr_len, int peer)
 {
@@ -617,7 +599,7 @@
 	.close		   = l2tp_ip_close,
 	.bind		   = l2tp_ip_bind,
 	.connect	   = l2tp_ip_connect,
-	.disconnect	   = l2tp_ip_disconnect,
+	.disconnect	   = udp_disconnect,
 	.ioctl		   = udp_ioctl,
 	.destroy	   = l2tp_ip_destroy_sock,
 	.setsockopt	   = ip_setsockopt,
